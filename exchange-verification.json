{
    "language": "Solidity",
    "sources": {
        "src/Exchange.sol": {
            "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract Exchange is ReentrancyGuard {\n    IERC20 public euroToken; // address on sepolia : 0x08210F9170F89Ab7658F0B5E3fF39b0E03C594D4 - 6 decimals\n    IERC20 public usdToken; // address on sepolia : 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238 - 6 decimals\n    address owner;\n    int256 exchangeRateEurToUsd;\n\n    //CONSTANTS\n    uint8 public constant EUR = 1;\n    uint8 public constant USD = 2;\n    uint8 public constant decimals = 8;\n\n    //ERRORS\n    error InsufficientAmount();\n    error InvalidExchangeRate();\n    error TransferFailed();\n    error Unauthorized();\n    error InvalidToken();\n    error InvalidCurrency();\n\n    //EVENTS\n    event ExchangeCompleted(\n        address indexed user,\n        uint256 sourceAmount,\n        uint256 targetAmount,\n        uint8 sourceCurrency,\n        uint8 targetCurrency,\n        int256 exchangeRate\n    );\n    event MoneySent(\n        address indexed from,\n        address indexed to,\n        uint256 sendAmount,\n        uint256 receiveAmount,\n        uint8 sendCurrency,\n        uint8 receiveCurrency,\n        int256 exchangeRate\n    );\n\n    constructor(address _euroTokenAddress, address _usdTokenAddress) {\n        euroToken = IERC20(_euroTokenAddress);\n        usdToken = IERC20(_usdTokenAddress);\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the contract owner\");\n        _;\n    }\n\n    function exchangeEurToUsd(uint256 amountInEur) public nonReentrant returns (uint256) {\n        if (amountInEur == 0) revert InsufficientAmount();\n\n        int256 exchangeRate = getExchangeRate();\n        if (exchangeRate <= 0) revert InvalidExchangeRate();\n\n        uint256 usdAmount = (amountInEur * uint256(exchangeRate)) / 10 ** getDecimals();\n\n        bool success = euroToken.transferFrom(msg.sender, address(this), amountInEur);\n        if (!success) revert TransferFailed();\n\n        success = usdToken.transfer(msg.sender, usdAmount);\n        if (!success) revert TransferFailed();\n\n        emit ExchangeCompleted(msg.sender, amountInEur, usdAmount, EUR, USD, exchangeRate);\n        return usdAmount;\n    }\n\n    function exchangeUsdToEur(uint256 amountInUsd) public nonReentrant returns (uint256) {\n        if (amountInUsd == 0) revert InsufficientAmount();\n\n        int256 exchangeRate = getExchangeRate();\n        if (exchangeRate <= 0) revert InvalidExchangeRate();\n\n        uint256 eurAmount = (amountInUsd * 10 ** getDecimals()) / uint256(exchangeRate);\n\n        bool success = usdToken.transferFrom(msg.sender, address(this), amountInUsd);\n        if (!success) revert TransferFailed();\n\n        success = euroToken.transfer(msg.sender, eurAmount);\n        if (!success) revert TransferFailed();\n\n        emit ExchangeCompleted(msg.sender, amountInUsd, eurAmount, USD, EUR, exchangeRate);\n        return eurAmount;\n    }\n\n    function sendMoney(uint256 amount, address to, uint8 sendCurrency, uint8 receiveCurrency)\n        public\n        nonReentrant\n        returns (uint256)\n    {\n        if (amount == 0) revert InsufficientAmount();\n        if (sendCurrency != EUR && sendCurrency != USD) revert InvalidCurrency();\n        if (receiveCurrency != EUR && receiveCurrency != USD) revert InvalidCurrency();\n\n        uint256 receiveAmount;\n        int256 exchangeRate = getExchangeRate();\n        if (exchangeRate <= 0) revert InvalidExchangeRate();\n\n        if (sendCurrency == receiveCurrency) {\n            if (sendCurrency == EUR) {\n                bool success = euroToken.transferFrom(msg.sender, to, amount);\n                if (!success) revert TransferFailed();\n                receiveAmount = amount;\n            } else if (sendCurrency == USD) {\n                bool success = usdToken.transferFrom(msg.sender, to, amount);\n                if (!success) revert TransferFailed();\n                receiveAmount = amount;\n            }\n        } else {\n            if (sendCurrency == EUR && receiveCurrency == USD) {\n                receiveAmount = (amount * uint256(exchangeRate)) / 10 ** getDecimals();\n\n                bool success = euroToken.transferFrom(msg.sender, address(this), amount);\n                if (!success) revert TransferFailed();\n\n                success = usdToken.transfer(to, receiveAmount);\n                if (!success) revert TransferFailed();\n            } else if (sendCurrency == USD && receiveCurrency == EUR) {\n                receiveAmount = (amount * 10 ** getDecimals()) / uint256(exchangeRate);\n\n                bool success = usdToken.transferFrom(msg.sender, address(this), amount);\n                if (!success) revert TransferFailed();\n\n                success = euroToken.transfer(to, receiveAmount);\n                if (!success) revert TransferFailed();\n            }\n        }\n\n        emit MoneySent(msg.sender, to, amount, receiveAmount, sendCurrency, receiveCurrency, exchangeRate);\n        return receiveAmount;\n    }\n\n    // onlyOwner\n    function addLiquidity(address token, uint256 amount) external onlyOwner {\n        require(token == address(euroToken) || token == address(usdToken), \"Invalid token\");\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n    }\n\n    //getters\n    function getEurcAddress() public view returns (address) {\n        return address(euroToken);\n    }\n\n    function getUsdtAddress() public view returns (address) {\n        return address(usdToken);\n    }\n\n    function getContractEurcBalance(address eurcToken) public view returns (uint256) {\n        return IERC20(eurcToken).balanceOf(address(this));\n    }\n\n    function getContractUsdtBalance(address usdtToken) public view returns (uint256) {\n        return IERC20(usdtToken).balanceOf(address(this));\n    }\n\n    function getExchangeRate() public view returns (int256) {\n        return exchangeRateEurToUsd;\n    }\n\n    function setExchangeRate(int256 exchangeRate) public {\n        exchangeRateEurToUsd = exchangeRate;\n    }\n\n    function getDecimals() public pure returns (uint8) {\n        return decimals;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
        }
    },
    "settings": {
        "remappings": [
            "@chainlink/contracts/=lib/chainlink/contracts/",
            "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
            "chainlink/=lib/chainlink/",
            "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            "forge-std/=lib/forge-std/src/",
            "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
            "openzeppelin-contracts/=lib/openzeppelin-contracts/"
        ],
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "metadata": {
            "useLiteralContent": false,
            "bytecodeHash": "ipfs",
            "appendCBOR": true
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode.object",
                    "evm.bytecode.sourceMap",
                    "evm.bytecode.linkReferences",
                    "evm.deployedBytecode.object",
                    "evm.deployedBytecode.sourceMap",
                    "evm.deployedBytecode.linkReferences",
                    "evm.deployedBytecode.immutableReferences",
                    "evm.methodIdentifiers",
                    "metadata"
                ]
            }
        },
        "evmVersion": "paris",
        "viaIR": false,
        "libraries": {}
    }
}